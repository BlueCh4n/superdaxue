package com.superDaxue.school.impl;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Random;

import net.sf.json.JSONObject;

import org.apache.http.Consts;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.ParseException;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.cookie.Cookie;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.CoreConnectionPNames;
import org.apache.http.util.EntityUtils;
import org.htmlparser.Node;
import org.htmlparser.NodeFilter;
import org.htmlparser.Parser;
import org.htmlparser.filters.AndFilter;
import org.htmlparser.filters.HasAttributeFilter;
import org.htmlparser.filters.NodeClassFilter;
import org.htmlparser.filters.TagNameFilter;
import org.htmlparser.tags.InputTag;
import org.htmlparser.tags.TableColumn;
import org.htmlparser.tags.TableRow;
import org.htmlparser.tags.TableTag;
import org.htmlparser.util.NodeList;
import org.htmlparser.util.ParserException;


import com.sun.org.apache.bcel.internal.generic.NEW;
import com.superDaxue.model.Courses;
import com.superDaxue.model.TimeTable;
import com.superDaxue.parse.impl.YpcParse;
import com.superDaxue.school.ISchool;
import com.superDaxue.tool.DownLoadImg;

public class Hhuwtian implements ISchool{
	private String cookie;
	private DefaultHttpClient httpclient = new DefaultHttpClient();
	private String baseurl="jw.hhuwtian.edu.cn";
	
	public String getCheckNum(String savePath) {
		return null;
	}
	
	
	public JSONObject doLogin(String username, String password,String checkNum) {
		
		JSONObject jsonObject=new JSONObject();
		String login_url="http://"+baseurl+"/loginAction.do";
		List<NameValuePair> nvps = new ArrayList<NameValuePair>();
		nvps.add(new BasicNameValuePair("zjh", username));
		nvps.add(new BasicNameValuePair("mm", password));
		
		List<NameValuePair> mapHeader=new ArrayList<NameValuePair>();
		mapHeader.add(new BasicNameValuePair("Host",baseurl));
		mapHeader.add(new BasicNameValuePair("Accept","text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"));
		mapHeader.add(new BasicNameValuePair("Referer","http://"+baseurl+"/loginAction.do"));
		mapHeader.add(new BasicNameValuePair("User-Agent","Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36"));
		String temp="";
		try {
			temp = doPost(mapHeader, nvps, login_url);
			this.cookie=getCookie();
		} catch (Exception e) {
			e.printStackTrace();
			jsonObject.put("message", "网络异常，登录错误");
		}		
		if(temp.indexOf("验证码不正确")!=-1){
			jsonObject.put("message", "验证码不正确");
		}else 
		if(temp.indexOf("frame src=\"/menu/s_top.jsp\"")!=-1){
			jsonObject.put("result","成功！");
			jsonObject.put("isSuccess","1");
			
			
		}
		else{
			jsonObject.put("message", "登录失败请检查您的用户名和密码");
		}
		return jsonObject;
	}
	
	public String getCookie(){
		List<Cookie> cookies = httpclient.getCookieStore().getCookies();
		StringBuilder cookiesSB = new StringBuilder();
		if (cookies.isEmpty()) {
			System.out.println("None");
		} else {
			for (int i = 0; i < cookies.size(); i++) {
				cookiesSB.append(cookies.get(i).getName()).append("=")
						.append(cookies.get(i).getValue()).append("; ");
			}
		}
		return cookiesSB.toString();
	}
	
	public String getScore() {
		String path="http://"+baseurl+"/gradeLnAllAction.do?type=ln&oper=qbinfo";
		List<NameValuePair> mapHeader=new ArrayList<NameValuePair>();
		mapHeader.add(new BasicNameValuePair("Host",baseurl));
		mapHeader.add(new BasicNameValuePair("Accept","text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"));
		mapHeader.add(new BasicNameValuePair("Referer","http://"+baseurl+"/gradeLnAllAction.do?type=ln&oper=qb"));
		mapHeader.add(new BasicNameValuePair("User-Agent","Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36"));
		mapHeader.add(new BasicNameValuePair("Cookie",cookie));
		StringBuffer sbBuffer=new StringBuffer();
		String str="";
		try {
			str = doGet(mapHeader,path);
			sbBuffer.append(str);
		} catch (Exception e1) {
			e1.printStackTrace();
			return null;
		}
		String unpassurl="http://"+baseurl+"/gradeLnAllAction.do?type=ln&oper=bjg";
		mapHeader.add(new BasicNameValuePair("Referer","http://"+baseurl+"/gradeLnAllAction.do?type=ln&oper=fa"));
		try {
			str = doGet(mapHeader,unpassurl);
			sbBuffer.append(str);
		} catch (Exception e1) {
			e1.printStackTrace();
			return null;
		}
		return sbBuffer.toString();
	}

	public String getTimetable() {
		String path="http://"+baseurl+"/xkAction.do?actionType=6";
		List<NameValuePair> mapHeader=new ArrayList<NameValuePair>();
		mapHeader.add(new BasicNameValuePair("Host",baseurl));
		mapHeader.add(new BasicNameValuePair("Accept","text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"));
		mapHeader.add(new BasicNameValuePair("Referer","http://"+baseurl+"/menu/s_menu.jsp"));
		mapHeader.add(new BasicNameValuePair("User-Agent","Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36"));
		mapHeader.add(new BasicNameValuePair("Cookie",cookie));
		try {
			String temp=doGet(mapHeader,path);
			return temp;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}
	
	private String doPost(List<NameValuePair> headers,List<NameValuePair> params, String url) throws Exception {
		httpclient.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 20000);
		HttpPost httppost = new HttpPost(url);
		for (NameValuePair valuePair : headers) {
			httppost.addHeader(valuePair.getName(), valuePair.getValue());
		}
		httppost.setEntity(new UrlEncodedFormEntity(params, Consts.UTF_8));
		httppost.getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT,20000);
		HttpResponse response = httpclient.execute(httppost);
		System.out.println("post : " + response.getStatusLine());
		HttpEntity resEntity = response.getEntity();
		String html = "";
		if (resEntity != null) {
			html = EntityUtils.toString(resEntity);
		}
		httppost.releaseConnection();
		return html;
	}

	private String doGet(List<NameValuePair> headers, String url) throws Exception {
		httpclient.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 20000);// httpclient
		HttpGet httpGet = new HttpGet(url);
		httpGet.getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT, 20000);
		if(headers!=null){
			for (NameValuePair valuePair : headers) {
				httpGet.addHeader(valuePair.getName(), valuePair.getValue());
			}// httpget 2秒超时
		}
		HttpResponse response = httpclient.execute(httpGet);
		System.out.println("get : " + response.getStatusLine());
		HttpEntity resEntity = response.getEntity();
		String html = "";
		if (resEntity != null) {
			html = EntityUtils.toString(resEntity);
		}
		httpGet.releaseConnection(); // 断开连接
		return html;
	}
}
