package com.superDaxue.parse.impl;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.List;
import java.util.Scanner;
import java.util.Vector;

import org.htmlparser.Node;
import org.htmlparser.NodeFilter;
import org.htmlparser.Parser;
import org.htmlparser.filters.AndFilter;
import org.htmlparser.filters.HasAttributeFilter;
import org.htmlparser.filters.NodeClassFilter;
import org.htmlparser.filters.StringFilter;
import org.htmlparser.tags.TableColumn;
import org.htmlparser.tags.TableRow;
import org.htmlparser.tags.TableTag;
import org.htmlparser.util.NodeList;
import org.htmlparser.util.ParserException;

import com.sun.xml.internal.ws.policy.privateutil.PolicyUtils.Collections;
import com.superDaxue.model.Courses;
import com.superDaxue.model.TimeTable;
import com.superDaxue.parse.IParse;

public class XxuParse implements IParse{
/***
 * 青果图文版
 */
	public List<Courses> parseCourses(String html) {
		 Parser parser = new Parser();  
	        try {
				parser.setInputHTML(html);
				parser.setEncoding("utf-8");  
			} catch (ParserException e) {
				e.printStackTrace();
			}  
	        NodeFilter filter = new NodeClassFilter(TableTag.class);  
	        NodeFilter attrFilter=new HasAttributeFilter( "bgcolor", "#89bfa7" );
	        NodeFilter andfFilter=new AndFilter(filter, attrFilter);
	        NodeList nodeList = null;
			try {
				nodeList = parser.extractAllNodesThatMatch(andfFilter);
			} catch (ParserException e) {
				e.printStackTrace();
			}
	    
	        List<Courses> list = new ArrayList<Courses>();
	        for(int i = 0; i < nodeList.size(); i++){  
	            if(nodeList.elementAt(i) instanceof TableTag){  
	                TableTag tag = (TableTag) nodeList.elementAt(i);
	                TableRow[] rows = tag.getRows();  
	                Courses courses=null;
	                for (int j = 0; j < rows.length; j++) {  
	                    TableRow row = (TableRow) rows[j];  
	                    	if(row.toPlainTextString().indexOf("[")==-1){
	                    		continue;
	                    	}
		                    TableColumn[] columns = row.getColumns(); 
		                    courses=new Courses();
		                    boolean flag=false;
		                    for (int k = 0; k < columns.length; k++) {  
		                    	Node columnNode=columns[k];
		                        String info = columnNode.toPlainTextString().trim(); 
		                        switch (k) {
								case 0:
									int co_start=info.indexOf("[");
									int co_end=info.indexOf("]");
									String code=info.substring(co_start+1,co_end);
									courses.setCourseCode(code);
									String name=info.substring(co_end+1);
									courses.setCoursesname(name);
									break;
								case 1:
									courses.setCredit(Double.parseDouble(info));
									break;
								case 2:
									courses.setType(info);
									break;
								case 3:
									courses.setGetType(info);
									break;
								case 4:
									courses.setCheckType(info);
									break;
								case 7:
									courses.setScore(info);
									break;
								case 8:
									int y_end=info.indexOf("学年");
									String year=info.substring(0,y_end);
									courses.setSchoolYear(year);
									int n_start=info.indexOf("第");
									int n_end=info.indexOf("学期");
									String nStr=info.substring(n_start+1,n_end);
									String n="";
									if("一".equals(nStr)){
										n="1";
									}
									else if("二".equals(nStr)){
										n="2";
									}
									courses.setSemester(n);
									break;
								default:
									break;
								}
		                    }//end for k
	                    list.add(courses);
	                }// end for j  
	            }  
	        }
	        return list;
	}
	
	public List<TimeTable> parseTimeTables(String html) {
		Parser parser = new Parser();  
        try {
			parser.setInputHTML(html);
			 parser.setEncoding("utf-8");
		} catch (ParserException e) {
			e.printStackTrace();
		}  
         
       List<TimeTable> list=new ArrayList<TimeTable>();
       NodeFilter filter = new NodeClassFilter(TableTag.class); 
       NodeFilter idFilter=new HasAttributeFilter("name","theExportData");
       NodeFilter andFilter=new AndFilter(filter, idFilter);
       NodeFilter heardFilter=new StringFilter("学年学期");
       NodeList headList=null;
       NodeList nodeList=null;
		try {
			nodeList = parser.extractAllNodesThatMatch(andFilter);
			parser.setInputHTML(html);
			headList=parser.extractAllNodesThatMatch(heardFilter);
		} catch (ParserException e) {
			e.printStackTrace();
		}
		int n=-1;
		
		Calendar calendar=Calendar.getInstance();
		int year=calendar.get(Calendar.YEAR);
		int month=calendar.get(calendar.MONTH);
		String schoolyear="";
		String semester="";
		if(month>8){
			schoolyear=year+"-"+(year+1);
			semester="一";
		}else {
			schoolyear=(year-1)+"-"+year;
			semester="二";
		}
		for (int i = 0; i < headList.size(); i++) {
			String info=headList.elementAt(i).toPlainTextString();
			int start=info.indexOf("学年学期：");
			int end=info.indexOf("学年第");
			String yearString=info.substring(start+5,end);
			String semesterString=info.substring(end+3,end+4);
			if(schoolyear.equals(yearString)&&semester.equals(semesterString)){
				n=i;
			}
		}
		if (n == -1) {
			return list;
		}
		if (nodeList.elementAt(n) instanceof TableTag) {
			TableTag tag = (TableTag) nodeList.elementAt(n);
			TableRow[] rows = tag.getRows();
			for (int j = 2; j < rows.length; j++) {
				TableRow row = (TableRow) rows[j];
				TableColumn[] columns = row.getColumns();
				TimeTable timeTable = new TimeTable();
				for (int k = 0; k < columns.length; k++) {
					Node columnNode = columns[k];
					String info = columnNode.toPlainTextString().trim();
					switch (k) {
					case 1:
						int co_start=info.indexOf("[");
						int co_end=info.indexOf("]");
						String code=info.substring(co_start+1,co_end);
						timeTable.setCourseCode(code);
						String name=info.substring(co_end+1);
						timeTable.setCourseName(name);
						break;
					case 2:
						timeTable.setCredit(Double.parseDouble(info));
						break;
					case 3:
						timeTable.setType(info);
						break;
					case 5:
						timeTable.setTeacher(info);
						break;
					case 7:
						timeTable.setClassNum(info);
						break;
					case 11:
						String[] addArr=info.split("@");
						for (int i = 0; i < addArr.length; i++) {
							String add=addArr[i];
							if("".equals(add)){
								continue;
							}
							int cyc_start=add.indexOf("[",0);
							int cyc_end=add.indexOf("周]",cyc_start);
							String cyc=add.substring(cyc_start+1,cyc_end);
							timeTable.setCycle(cyc);
							int week_start=add.indexOf("星期",cyc_end);
							String week=add.substring(week_start+2,week_start+3);
							timeTable.setWeek("周"+week);
							int time_start=add.indexOf("[",week_start+3);
							int time_end=add.indexOf("节]",time_start);
							String time=add.substring(time_start+1,time_end);
							if(time.indexOf("-")==-1&&time.length()<3){
								timeTable.setTime(time+"-"+time);
							}
							else{
								timeTable.setTime(time);
							}
							int address_start=add.indexOf("]/",time_end);
							String address=add.substring(address_start+2);
							timeTable.setAddress(address);
							list.add(timeTable.clone());
						}
						break;
					default:
						break;
					}
				}// end for k
			}// end for j
		}
		return list;
	}
	
	public static void main(String[] args) {
		XxuParse ypcParse = new XxuParse();
		String html=readTxtFile("C:/Users/Administrator/Desktop/temp/temp/timetable.html");
		List<TimeTable> list = ypcParse.parseTimeTables(html);
		for (int i = 0; i < list.size(); i++) {
			System.out.println(list.get(i));
		}
	}
	
	
	public static String readFile(String path) {
		StringBuffer stringBuffer=new StringBuffer();
        try {
            Scanner in = new Scanner(new File(path));
            while (in.hasNextLine()) {
                String str = in.nextLine();
                stringBuffer.append(str);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return stringBuffer.toString();
    }
	
	 public static String readTxtFile(String filePath){
		 StringBuffer stringBuffer=new StringBuffer();
	        try {
	                String encoding="utf-8";
	                File file=new File(filePath);
	                if(file.isFile() && file.exists()){ //判断文件是否存在
	                    InputStreamReader read = new InputStreamReader(
	                    new FileInputStream(file),encoding);//考虑到编码格式
	                    BufferedReader bufferedReader = new BufferedReader(read);
	                    String lineTxt = null;
	                    while((lineTxt = bufferedReader.readLine()) != null){
	                        stringBuffer.append("\r\n"+lineTxt);
	                    }
	                    read.close();
	        }else{
	            System.out.println("找不到指定的文件");
	        }
	        } catch (Exception e) {
	            System.out.println("读取文件内容出错");
	            e.printStackTrace();
	        }
	        return stringBuffer.toString();
	 }
	

}
