package com.superDaxue.school.impl;

import java.io.File;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;

import net.sf.json.JSONObject;

import org.apache.http.Consts;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.cookie.Cookie;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.CoreConnectionPNames;
import org.apache.http.util.EntityUtils;
import org.htmlparser.NodeFilter;
import org.htmlparser.Parser;
import org.htmlparser.filters.AndFilter;
import org.htmlparser.filters.HasAttributeFilter;
import org.htmlparser.filters.NodeClassFilter;
import org.htmlparser.tags.InputTag;
import org.htmlparser.util.NodeList;
import org.htmlparser.util.ParserException;

import com.superDaxue.school.ISchool;
import com.superDaxue.tool.DownLoadImg;

public class Jxgymy implements ISchool{
	private String username;
	private String cookie;
	private DefaultHttpClient httpclient = new DefaultHttpClient();
	private String baseurl="jwgl.jxgymy.com:8003";
	
	public String getCheckNum(String savePath) {
		return null;
	}
	
	
	public JSONObject doLogin(String username, String password,String checkNum) {
		JSONObject jsonObject=new JSONObject();
		this.username=username;
		String path_index="http://ca.jxgymy.com:8001/zfca/login";
		List<NameValuePair> headers= new ArrayList<NameValuePair>();
		String html;
		try {
			html = doGet(headers, path_index);
			if(html.indexOf("/zfca/logout")!=-1){
				String path_logout="http://ca.jxgymy.com:8001/zfca/logout";
				headers.add(new BasicNameValuePair("Cookie",cookie));
				String logout=doGet(headers, path_logout);
				headers.remove(new BasicNameValuePair("Cookie",cookie));
				html = doGet(headers, path_index);
			}
			
			headers= parseCoursesParam(html);
		} catch (Exception e1) {
			e1.printStackTrace();
			jsonObject.put("message", "网络异常请稍后再试");
			return jsonObject;
		}
		String login_url="http://ca.jxgymy.com:8001/zfca/login";
		List<NameValuePair> nvps = new ArrayList<NameValuePair>();
		nvps.add(new BasicNameValuePair("username", username));
		nvps.add(new BasicNameValuePair("password", password));
		nvps.add(new BasicNameValuePair("losetime", "1"));
		nvps.add(new BasicNameValuePair("useValidateCode", "0"));
		nvps.add(new BasicNameValuePair("isremenberme", "1"));
		nvps.add(new BasicNameValuePair("ip", ""));
		nvps.add(new BasicNameValuePair("_eventId", "submit"));
		nvps.add(new BasicNameValuePair("submit1", ""));
		nvps.addAll(headers);
		List<NameValuePair> mapHeader=new ArrayList<NameValuePair>();
		mapHeader.add(new BasicNameValuePair("Host","ca.jxgymy.com:8001"));
		mapHeader.add(new BasicNameValuePair("Accept","text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"));
		mapHeader.add(new BasicNameValuePair("Referer","http://ca.jxgymy.com:8001/zfca/login"));
		mapHeader.add(new BasicNameValuePair("User-Agent","Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36"));
		String temp="";
		try {
			temp = doPost(mapHeader, nvps, login_url);
			this.cookie=getCookie();
		} catch (Exception e) {
			e.printStackTrace();
			jsonObject.put("message", "网络异常，登录错误");
		}		
		if(temp.indexOf("验证码不正确")!=-1){
			jsonObject.put("message", "验证码不正确");
		}
		else if("".equals(temp)){
			jsonObject.put("result","成功！");
			jsonObject.put("isSuccess","1");
			String urlString="http://ca.jxgymy.com:8001/zfca?yhlx=student&login=0122579031373493708&url=xs_main.aspx";
			mapHeader.add(new BasicNameValuePair("Cookie",cookie));
			try {
				String tempsString=doGet(headers, urlString);
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			
		}
		else{
			jsonObject.put("message", "登录失败请检查您的用户名和密码");
		}
		return jsonObject;
	}
	
	public String getCookie(){
		List<Cookie> cookies = httpclient.getCookieStore().getCookies();
		StringBuilder cookiesSB = new StringBuilder();
		if (cookies.isEmpty()) {
			System.out.println("None");
		} else {
			for (int i = 0; i < cookies.size(); i++) {
				cookiesSB.append(cookies.get(i).getName()).append("=")
						.append(cookies.get(i).getValue()).append("; ");
			}
		}
		return cookiesSB.toString();
	}
	public String getScore() {
		String path="http://"+baseurl+"/xscj_gc.aspx?xh="+username+"&gnmkdm=N121605";
		List<NameValuePair> mapHeader=new ArrayList<NameValuePair>();
		mapHeader.add(new BasicNameValuePair("Host",baseurl));
		mapHeader.add(new BasicNameValuePair("Accept","text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"));
		mapHeader.add(new BasicNameValuePair("Referer","http://"+baseurl+"/xscj_gc.aspx?xh="+username+"&gnmkdm=N121605"));
		mapHeader.add(new BasicNameValuePair("User-Agent","Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36"));
		mapHeader.add(new BasicNameValuePair("Cookie",cookie));
		String str="";
		try {
			str = doGet(mapHeader,path);
		} catch (Exception e1) {
			e1.printStackTrace();
			return null;
		}
		try {
			List<NameValuePair> nvps = new ArrayList<NameValuePair>();
			nvps.add(new BasicNameValuePair("ddlXN", ""));
			nvps.add(new BasicNameValuePair("ddlXQ", ""));
			nvps.add(new BasicNameValuePair("Button2", ""));
			nvps.addAll(parseCoursesParam(str));
			
			try {
				String temp=doPost(mapHeader,nvps,path);
				return temp;
			} catch (Exception e) {
				e.printStackTrace();
				return null;
			}
		} catch (ParserException e) {
			e.printStackTrace();
			return null;
		}
	}

	public String getTimetable() {
		String path="http://"+baseurl+"/xskbcx.aspx?xh="+username+"&gnmkdm=N121603";
		List<NameValuePair> mapHeader=new ArrayList<NameValuePair>();
		mapHeader.add(new BasicNameValuePair("Host",baseurl));
		mapHeader.add(new BasicNameValuePair("Accept","text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"));
		mapHeader.add(new BasicNameValuePair("Referer","http://"+baseurl+"/xskbcx.aspx?xh="+username+"&gnmkdm=N121603"));
		mapHeader.add(new BasicNameValuePair("User-Agent","Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.85 Safari/537.36"));
		mapHeader.add(new BasicNameValuePair("Cookie",cookie));
		String str="";
		try {
			str = doGet(mapHeader,path);
		} catch (Exception e1) {
			e1.printStackTrace();
			return null;
		}
			
		try {
			Calendar calendar=Calendar.getInstance();
			int year=calendar.get(Calendar.YEAR);
			int month=calendar.get(calendar.MONTH);
			String schoolyear="";
			String semester="";
			if(month>8){
				schoolyear=year+"-"+(year+1);
				semester="1";
			}else {
				schoolyear=(year-1)+"-"+year;
				semester="2";
			}
			List<NameValuePair> nvps = new ArrayList<NameValuePair>();
			nvps.add(new BasicNameValuePair("xnd",schoolyear));
			nvps.add(new BasicNameValuePair("xqd", semester));
			nvps.add(new BasicNameValuePair("ddlXQ", ""));
			nvps.add(new BasicNameValuePair("Button5", ""));
			nvps.addAll(parseCoursesParam(str));
			try {
				String temp=doPost(mapHeader,nvps,path);
				return temp;
			} catch (Exception e) {
				e.printStackTrace();
				return null;
			}
		} catch (ParserException e) {
			e.printStackTrace();
			return null;
		}
	}
	
	private String doPost(List<NameValuePair> headers,List<NameValuePair> params, String url) throws Exception {
		httpclient.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 20000);
		HttpPost httppost = new HttpPost(url);
		if(headers!=null){
			for (NameValuePair valuePair : headers) {
				httppost.addHeader(valuePair.getName(), valuePair.getValue());
			}
		}
		httppost.setEntity(new UrlEncodedFormEntity(params, Consts.UTF_8));
		httppost.getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT,20000);
		HttpResponse response = httpclient.execute(httppost);
		System.out.println("post : " + response.getStatusLine());
		HttpEntity resEntity = response.getEntity();
		String html = "";
		if (resEntity != null) {
			html = EntityUtils.toString(resEntity);
		}
		httppost.releaseConnection();
		return html;
	}

	private String doGet(List<NameValuePair> headers, String url) throws Exception {
		httpclient.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 20000);// httpclient
		HttpGet httpGet = new HttpGet(url);
		httpGet.getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT, 20000);
		if(headers!=null){
			for (NameValuePair valuePair : headers) {
				httpGet.addHeader(valuePair.getName(), valuePair.getValue());
			}// httpget 2秒超时
		}
		HttpResponse response = httpclient.execute(httpGet);
		System.out.println("get : " + response.getStatusLine());
		HttpEntity resEntity = response.getEntity();
		String html = "";
		if (resEntity != null) {
			html = EntityUtils.toString(resEntity);
		}
		httpGet.releaseConnection(); // 断开连接
		return html;
	}
	
	
	
	private List<NameValuePair> parseCoursesParam(String html) throws ParserException {
		List<NameValuePair> list=new ArrayList<NameValuePair>();
		Parser parser = new Parser();
		parser.setInputHTML(html);
		parser.setEncoding("utf-8");
		NodeFilter filter = new NodeClassFilter(InputTag.class);
		NodeFilter attrFilter=new HasAttributeFilter( "type", "hidden" );
		NodeFilter andFilter=new AndFilter(filter, attrFilter);
		NodeList nodeList = parser.extractAllNodesThatMatch(andFilter);
		for(int i = 0; i < nodeList.size(); i++){  
			if(nodeList.elementAt(i) instanceof InputTag){  
				InputTag inputTag=(InputTag) nodeList.elementAt(i);
				String info=inputTag.toHtml();
				if(info.indexOf("name=\"")!=-1){
					int name_start=info.indexOf("name=\"")+"name=\"".length();
					int name_end = info.indexOf("\"",name_start+1);
					String name=info.substring(name_start,name_end);
					int value_start=info.indexOf("value=\"");
					if(value_start!=-1){
						value_start+="value=\"".length();
						int value_end=info.indexOf("\"",value_start);
						String value=info.substring(value_start, value_end);
						list.add(new BasicNameValuePair(name,value));
					}
				}
				
			}
		}
		return list;
	}
	
}
